type Query {
    "Ordinary user login"
    login(username: String!, password: String!): LoginResponse
    "Admin login"
    adminLogin(username: String!, password: String!): LoginResponse
    "Query the currently logged in user information"
    findCurrentUserInfo: UserInfoResult
    "Query user information by ID array"
    findUserInfoByIds(userIds: [Int]!): UsersInfoResult
    "Query all user information under the specified role ID"
    findUsersInRole(roleId: Int!): UsersInfoResult
    "Query all user information under the specified organization ID"
    findUsersInOrganization(organizationId: Int!): UsersInfoResult
    "验证用户密码"
    checkPwd(username: String!,password:String!): checkPwdResult
}

type Mutation {
    "Ordinary user registration"
    register(registerUserInput: RegisterUserInput): UserModuleCommonResult
    "Create user"
    createUser(createUserInput: CreateUserInput): UserModuleCommonResult
    "Add a role to the user"
    addUserRole(userId: Int!, roleId: Int!): UserModuleCommonResult
    "Ban user"
    banUser(userId: Int!): UserModuleCommonResult
    "Delete a role from the user"
    deleteUserRole(userId: Int!, roleId: Int!): UserModuleCommonResult
    "Delete user to recycle bin"
    recycleUser(userId: Int!): UserModuleCommonResult
    "Delete user in the recycle bin"
    deleteRecycledUser(userId: [Int]!): UserModuleCommonResult
    "Revert banned user"
    revertBannedUser(userId: Int!): UserModuleCommonResult
    "Revert recycled user"
    revertRecycledUser(userId: Int!): UserModuleCommonResult
    "Specify user information by ID update"
    updateUserInfoById(userId: Int!, updateUserInput: UpdateUserInput): UserModuleCommonResult
    "Update current login user information"
    updateCurrentUserInfo(updateCurrentUserInput: UpdateCurrentUserInput): UserModuleCommonResult
    "Find password"
    findPassword(mobile: String!,password: String!): UserModuleCommonResult
}

type checkPwdResult{
    code: Int
    message: String
    data: Boolean
}

input RegisterUserInput {
    username: String!
    email: String
    mobile: String
    password: String!
    nickname: String
    avater: String
}

input CreateUserInput {
    username: String!
    email: String
    mobile: String
    password: String!
    roleIds: [Int]
    nickname: String
    avater: String
}

input UpdateUserInput {
    username: String
    email: String
    mobile: String
    password: String
    avater: String
    nickname: String
    "An array of role ID objects owned, each item must contain the role ID (before) before the update, and the role ID (after) after the update"
    roleIds: [RoleOrOrganizationIdData]
}

input UpdateCurrentUserInput {
    email: String
    mobile: String
    password: String
    nickname: String
    avater: String
}

input RegisterOrCreateInfoKV {
    "Information item ID"
    key: Int
    "Information item value"
    value: String
}

input UpdateInfoKV {
    "ID of the item value(userInfo.id)"
    key: Int
    "Information item value(userInfo.value)"
    value: String
    "Information item ID(infoItem.id)"
    relationId: Int
}

input RoleOrOrganizationIdData {
    "Update previous ID"
    before: Int
    "Updated ID"
    after: Int
}

type LoginResponse {
    code: Int
    message: String
    data: AccessToken
}

type AccessToken {
    accessToken: String
    expiresIn: Int
}

type UserInfoResult {
    code: Int
    message: String
    data: UserInfoData
}

type UsersInfoResult {
    code: Int
    message: String
    data: [UserInfoData]
}

type UserInfoData {
    id:Int
    username: String
    email: String
    mobile: String
    banned: Boolean
    recycle: Boolean
    createTime: String
    updateTime: String
    userRoles: [Role]
    nickname: String
    avater: String
}

type UserInfo {
    id:Int
    order: Int
    "Information item ID(infoItem.id)"
    relationId: Int
    type: String
    name: String
    value: String
    description: String
    registerDisplay: Boolean
    informationDisplay: Boolean
}
